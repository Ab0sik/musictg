import telebot
from telebot import types
import requests
from pytubefix import Search, YouTube
from io import BytesIO
import os
from flask import Flask, request

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN", "7993987166:AAFKhbLsUWf-1SzEuOCU8acYt_OxCZR-9Qs")
BOT_NAME = "Wilderry"
BOT_USERNAME = "wilderrybot"
BOT_DESCRIPTION = """
<b>üîç –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –±—ã—Å—Ç—Ä—ã–º –ø–æ–∏—Å–∫–æ–º</b>

üéµ –ù–∞–π–¥—É –ª—é–±—É—é –º—É–∑—ã–∫—É –∏–ª–∏ –∫–ª–∏–ø –Ω–∞ YouTube
üì• –°–∫–∞—á–∞—é –≤ MP3 (–∞—É–¥–∏–æ) –∏–ª–∏ MP4 (–≤–∏–¥–µ–æ)
‚ö° –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏'),
        types.KeyboardButton('üì• –ú–æ–∏ –∑–∞–≥—Ä—É–∑–∫–∏'),
        types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å'),
        types.KeyboardButton('‚≠ê –û –±–æ—Ç–µ')
    ]
    markup.add(*buttons)
    return markup


def create_back_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥'))
    return markup


def create_search_results_markup(results):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    markup = types.InlineKeyboardMarkup()
    for i, video in enumerate(results[:5], 1):
        btn_text = f"{i}. {video.title[:25]} - {video.author[:15]}"
        markup.add(types.InlineKeyboardButton(
            btn_text,
            callback_data=f"select_{video.video_id}"
        ))
    return markup


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    welcome_text = f"""
    <b>{BOT_NAME}</b> (@{BOT_USERNAME})

    {BOT_DESCRIPTION}
    """
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
def back_to_menu(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda m: m.text == 'üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏')
def start_search(message):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    msg = bot.send_message(
        message.chat.id,
        "üîç <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
        reply_markup=create_back_button()
    )
    bot.register_next_step_handler(msg, process_search_query)


@bot.message_handler(func=lambda m: m.text == '‚ùì –ü–æ–º–æ—â—å')
def show_help(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
    <b>‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>

    1. –ù–∞–∂–º–∏—Ç–µ <b>'üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏'</b>
    2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
    4. –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç (MP3/MP4)
    5. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª!

    <i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'</i>
    """
    bot.send_message(
        message.chat.id,
        help_text,
        reply_markup=create_back_button()
    )


@bot.message_handler(func=lambda m: m.text == '‚≠ê –û –±–æ—Ç–µ')
def about_bot(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    about_text = f"""
    <b>{BOT_NAME}</b> (@{BOT_USERNAME})

    –í–µ—Ä—Å–∏—è: 2.0
    –û–±–Ω–æ–≤–ª–µ–Ω–æ: 15.07.2023

    <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
    - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ YouTube
    - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ MP3/MP4
    - –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    - –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @YourUsername
    """
    bot.send_message(
        message.chat.id,
        about_text,
        reply_markup=create_back_button()
    )


def process_search_query(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return back_to_menu(message)

    try:
        query = message.text
        bot.send_message(
            message.chat.id,
            f"üîç –ò—â—É: <i>{query}</i>...",
            reply_markup=create_back_button()
        )

        # –ü–æ–∏—Å–∫ –Ω–∞ YouTube
        search_results = Search(query).results[:5]

        if not search_results:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=create_back_button()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        user_data[message.chat.id] = {
            'last_search': query,
            'results': {vid.video_id: vid for vid in search_results}
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        bot.send_message(
            message.chat.id,
            "üéµ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:</b>",
            reply_markup=create_search_results_markup(search_results)
        )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=create_back_button()
        )


@bot.callback_query_handler(func=lambda c: c.data.startswith('select_'))
def show_selected_track(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫"""
    try:
        chat_id = call.message.chat.id
        video_id = call.data.split('_')[1]

        if chat_id not in user_data or video_id not in user_data[chat_id]['results']:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return

        video = user_data[chat_id]['results'][video_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        bot.send_photo(
            chat_id,
            video.thumbnail_url,
            caption=f"üéµ <b>{video.title}</b>\nüë§ {video.author}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:</b>"
        )

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üé∂ –°–∫–∞—á–∞—Ç—å MP3", callback_data=f"dl_{video_id}_mp3"),
            types.InlineKeyboardButton("üé• –°–∫–∞—á–∞—Ç—å MP4", callback_data=f"dl_{video_id}_mp4")
        )
        markup.add(types.InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"))

        bot.send_message(chat_id, "‚¨áÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", reply_markup=markup)
        bot.delete_message(chat_id, call.message.message_id)

    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=create_back_button()
        )


@bot.callback_query_handler(func=lambda c: c.data == "new_search")
def new_search(call):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    bot.send_message(
        call.message.chat.id,
        "üîç <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>",
        reply_markup=create_back_button()
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith('dl_'))
def download_track(call):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫"""
    try:
        chat_id = call.message.chat.id
        _, video_id, format_type = call.data.split('_')

        if chat_id not in user_data or video_id not in user_data[chat_id]['results']:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        video = user_data[chat_id]['results'][video_id]
        bot.answer_callback_query(call.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
        buffer = BytesIO()

        if format_type == "mp3":
            # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫
            audio_stream = video.streams.filter(only_audio=True).first()
            audio_stream.stream_to_buffer(buffer)
            buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ MP3
            bot.send_audio(
                chat_id,
                buffer,
                title=video.title,
                performer=video.author,
                thumb=requests.get(video.thumbnail_url).content
            )

        elif format_type == "mp4":
            # –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ (360p)
            video_stream = video.streams.filter(
                file_extension="mp4",
                progressive=True
            ).order_by('resolution').desc().first()

            video_stream.stream_to_buffer(buffer)
            buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ MP4
            bot.send_video(
                chat_id,
                buffer,
                caption=f"üé• <b>{video.title}</b>\nüë§ {video.author}"
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.delete_message(chat_id, call.message.message_id)

    except Exception as e:
        bot.send_message(
            call.message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}",
            reply_markup=create_back_button()
        )

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/', methods=['GET'])
def home():
    return {"status": "Bot is running", "deploy": os.getenv("RENDER_EXTERNAL_URL")}, 200

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    webhook_url = f"https://telegram-bot-o8wp.onrender.com/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    return f"Webhook set to {webhook_url}", 200

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
    return "ok", 200

@app.route('/ping')
def ping():
    return "pong", 200

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å polling
    if os.getenv("ENVIRONMENT") == "development":
        print(f"–ë–æ—Ç {BOT_NAME} (@{BOT_USERNAME}) –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!")
        bot.infinity_polling()
    else:
        # –î–ª—è production —Å –≤–µ–±—Ö—É–∫–∞–º–∏
        app.run(host='0.0.0.0', port=5000)
